#!/usr/bin/env node

// Generate build info for embedding in the application
const { execSync } = require('node:child_process')
const fs = require('node:fs')
const path = require('node:path')

try {
  // Get git commit hash (short version)
  const commitHash = execSync('git rev-parse --short HEAD', {
    encoding: 'utf-8',
  }).trim()

  // Get build timestamp
  const buildTime = new Date().toISOString()

  // Create build info object
  const buildInfo = {
    commitHash,
    buildTime,
  }

  // Write to src/buildInfo.ts
  const outputPath = path.join(__dirname, '..', 'src', 'buildInfo.ts')
  const content = `// Auto-generated by scripts/generate-build-info.js
// Do not edit manually

export const BUILD_INFO = {
  commitHash: '${commitHash}',
  buildTime: '${buildTime}',
} as const
`

  fs.writeFileSync(outputPath, content, 'utf-8')

  console.log(`[build-info] Generated build info: ${commitHash} @ ${buildTime}`)
} catch (error) {
  console.error('[build-info] Failed to generate build info:', error.message)
  // Write fallback build info
  const outputPath = path.join(__dirname, '..', 'src', 'buildInfo.ts')
  const fallback = {
    commitHash: 'unknown',
    buildTime: new Date().toISOString(),
  }
  const content = `// Auto-generated by scripts/generate-build-info.js
// Do not edit manually

export const BUILD_INFO = {
  commitHash: '${fallback.commitHash}',
  buildTime: '${fallback.buildTime}',
} as const
`
  fs.writeFileSync(outputPath, content, 'utf-8')
  process.exit(0) // Don't fail the build
}
